# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: "Build and Test Apache Flink"

on:
  workflow_call:
    inputs:
      environment:
        description: "defines environment variables for downstream scripts"
        required: true
        type: string
      jdk-version:
        description: "the jdk version to use"
        required: true
        type: number
    secrets:
      s3_bucket:
        required: false
      s3_access_key:
        required: false
      s3_secret_key:
        required: false
      glue_schema_access_key:
        required: false
      glue_schema_secret_key:
        required: false

permissions: read-all

env:
  # The working directory within the Docker container is set to /__w which is mapped to the runner
  # directory /home/runner/work.
  CONTAINER_WORKING_DIR: /__w/flink/flink
  MAVEN_REPO_FOLDER: /__w/flink/flink/.m2/repository
  MAVEN_ARGS: -Dmaven.repo.local=/__w/flink/flink/.m2/repository
  FLINK_ARTIFACT_DIR: /root/
  FLINK_ARTIFACT_FILENAME: flink_artifacts.tar.gz
  DOCKER_IMAGES_CACHE_FOLDER: /root/.docker-cache
  CHECKOUT_DIR: /root/flink

jobs:
  compile:
    name: "Compile"
    runs-on: ubuntu-latest
    container:
      image: chesnay/flink-ci:java_8_11_17_maven_386_v2
      options: --init
    timeout-minutes: 240
    outputs:
      stringified-workflow-name: ${{ steps.workflow-prep-step.outputs.stringified-workflow-name }}
    steps:
      - name: "Flink Checkout"
        uses: actions/checkout@v3
        with:
          persist-credentials: false

      - name: "Stringify workflow name"
        id: workflow-prep-step
        run: |
          stringified_workflow_name=$(echo "${{ github.workflow }}" | tr -C '[:alnum:]._' '-' |  tr '[:upper:]' '[:lower:]' | sed -e 's/--*/-/g' -e 's/^-*//g' -e 's/-*$//g')
          echo "stringified-workflow-name=${stringified_workflow_name}" >> $GITHUB_OUTPUT

      - name: "Set JDK version to Java ${{ inputs.jdk-version }}"
        uses: "./.github/actions/set_java_in_container"
        with:
          jdk-version: ${{ inputs.jdk-version }}

      - name: "Setup Maven package cache"
        uses: actions/cache@v3
        with:
          path: ${{ env.MAVEN_REPO_FOLDER }}
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven-

      - name: "Moves relevant checkout content to ${{ env.CHECKOUT_DIR }}"
        uses: "./.github/actions/move_checkout"
        with:
          source-directory: ${{ env.CONTAINER_WORKING_DIR }}
          target-directory: ${{ env.CHECKOUT_DIR }}

      - name: "Compile Flink"
        working-directory: ${{ env.CHECKOUT_DIR }}
        run: |
          ${{ inputs.environment }} ./tools/ci/validate.sh "test-compile -Dflink.markBundledAsOptional=false -Dfast" || exit $?

      - name: "Collect build artifacts"
        working-directory: ${{ env.CHECKOUT_DIR }}
        run: |
          ./tools/azure-pipelines/create_build_artifact.sh -f ${{ env.FLINK_ARTIFACT_DIR }}/${{ env.FLINK_ARTIFACT_FILENAME }}

      - name: "Upload artifacts to make them available in downstream jobs"
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts-${{ steps.workflow-prep-step.outputs.stringified-workflow-name }}-${{ github.run_number }}
          path: ${{ env.FLINK_ARTIFACT_DIR }}${{ env.FLINK_ARTIFACT_FILENAME }}
          if-no-files-found: error

  e2e-prereq-check:
    name: "Check: Code modified"
    needs: compile
    runs-on: ubuntu-latest
    container:
      image: chesnay/flink-ci:java_8_11_17_maven_386_v2
      options: --init
    outputs:
      skip-e2e: ${{ steps.docs-only-pr-check.skip-e2e }}
    steps:
      - name: "Flink Checkout"
        uses: actions/checkout@v3
        with:
          persist-credentials: false

      # Skip e2e test execution if this is a documentation only pull request (master / release builds will still be checked regularly)
      - name: "Check if it's a docs-only PR (i.e. e2e tests can be skipped)"
        id: docs-only-pr-check
        run: |
          source ./tools/azure-pipelines/build_properties.sh
          if is_docs_only_pullrequest; then
            echo "This is a documentation-only change. Skipping e2e execution."
            echo "skip-e2e=true" >> $GITHUB_OUTPUT
          else
            echo "This is a regular CI build. Continuing ..."
          fi
        shell: bash

  e2e:
    name: "E2E (group ${{ matrix.group }})"
    needs: [compile, e2e-prereq-check]
    runs-on: ubuntu-latest
    if: ${{ needs.e2e-prereq-check.outputs.skip-e2e != 'true' }}
    # timeout-minutes: 310
    env:
      E2E_CACHE_FOLDER: ${{ github.workspace }}/.e2e-cache
      E2E_TARBALL_CACHE: ${{ github.workspace }}/.e2e-tarbal-cache
      MAVEN_REPO_FOLDER: ${{ github.workspace }}/.m2/repository
      MAVEN_ARGS: -Dmaven.repo.local=${{ github.workspace }}/.m2/repository
      FLINK_ARTIFACT_DIR: ${{ github.workspace }}
      FLINK_ARTIFACT_FILENAME: flink_artifacts.tar.gz
      DOCKER_IMAGES_CACHE_FOLDER: ${{ github.workspace }}/.docker-cache
    strategy:
      fail-fast: false
      matrix:
        group: [2]

    steps:
      - name: "Flink Checkout"
        uses: actions/checkout@v3
        with:
          persist-credentials: false

      - name: "Set JDK version to Java ${{ inputs.jdk-version }}"
        uses: "./.github/actions/set_java_in_container"
        with:
          jdk-version: ${{ inputs.jdk-version }}

      - name: "Install missing packages"
        run: sudo apt-get install -y net-tools docker-compose

      - name: "Legacy openssl"
        run: |
          sudo sed -i '/^\default = default_sect/a legacy = legacy_sect' /etc/ssl/openssl.cnf
          sudo sed -i '/^\default = default_sect/a legacy = legacy_sect' /etc/ssl/openssl.cnf
          sudo sed -i '/^\[default_sect\]/a activate = 1' /etc/ssl/openssl.cnf
          sudo echo "[legacy_sect]" >> /etc/ssl/openssl.cnf
          sudo echo "activate = 1" >> /etc/ssl/openssl.cnf

      - name: "Setup Maven package cache"
        uses: actions/cache@v3
        with:
          path: ${{ env.MAVEN_REPO_FOLDER }}
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven-

      - name: "Download build artifacts from compile job"
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts-${{ needs.compile.outputs.stringified-workflow-name }}-${{ github.run_number }}
          path: ${{ env.FLINK_ARTIFACT_DIR }}

      - name: "Unpack build artifact"
        run: ./tools/azure-pipelines/unpack_build_artifact.sh -f ${{ env.FLINK_ARTIFACT_DIR }}/${{ env.FLINK_ARTIFACT_FILENAME }} -t ${{ github.workspace }}

      # the cache task does not create directories on a cache miss, and can later fail when trying to tar the directory if the test haven't created it
      # this may for example happen if a given directory is only used by a subset of tests, which are run in a different 'group'
      - name: "Create cache directories"
        run: |
          mkdir -p ${{ env.E2E_CACHE_FOLDER }}
          mkdir -p ${{ env.E2E_TARBALL_CACHE }}
          mkdir -p ${{ env.DOCKER_IMAGES_CACHE_FOLDER }}

      - name: "Load E2E files from Cache"
        uses: actions/cache@v3
        with:
          path: ${{ env.E2E_CACHE_FOLDER }}
          key: e2e-cache-${{ matrix.group }}-${{ hashFiles('**/flink-end-to-end-tests/**/*.java', '!**/avro/**') }}

      - name: "Load E2E artifacts from Cache"
        uses: actions/cache@v3
        with:
          path: ${{ env.E2E_TARBALL_CACHE }}
          key: e2e-artifact-cache-${{ matrix.group }}-${{ hashFiles('**/flink-end-to-end-tests/**/*.sh') }}
          restore-keys: e2e-artifact-cache-${{ matrix.group }}

      - name: "Try loading Docker images from Cache"
        id: docker-cache
        uses: actions/cache@v3
        with:
          path: ${{ env.DOCKER_IMAGES_CACHE_FOLDER }}
          key: e2e-${{ matrix.group }}-docker-${{ runner.os }}-${{ hashFiles('**/cache_docker_images.sh', '**/flink-test-utils-parent/**/DockerImageVersions.java') }}

      - name: "Load Docker images if not present in Cache, yet"
        if: ${{ !cancelled() && !steps.docker-cache.cache.hit }}
        run: ./tools/azure-pipelines/cache_docker_images.sh -f ${{ env.DOCKER_IMAGES_CACHE_FOLDER }} load

      - name: "Build Flink"
        run: ${{ inputs.environment }} ./tools/ci/validate.sh "install -DskipTests -Dfast $PROFILE -Pskip-webui-build"

      - name: "Run E2E Tests"
        id: test-run
        env:
          IT_CASE_S3_BUCKET: ${{ secrets.s3_bucket }}
          IT_CASE_S3_ACCESS_KEY: ${{ secrets.s3_access_key }}
          IT_CASE_S3_SECRET_KEY: ${{ secrets.s3_secret_key }}
          IT_CASE_GLUE_SCHEMA_ACCESS_KEY: ${{ secrets.glue_schema_access_key }}
          IT_CASE_GLUE_SCHEMA_SECRET_KEY: ${{ secrets.glue_schema_secret_key }}
        # timeout-minutes: 310
        run: |
          ${{ inputs.environment }} FLINK_DIR=`pwd`/build-target ./tools/azure-pipelines/uploading_watchdog.sh \
            -a ${{ github.job }} \
            -d ${{ env.FLINK_ARTIFACT_DIR }} \
            -t 310 \
            flink-end-to-end-tests/run-nightly-tests.sh ${{ matrix.group }}

      - name: "Print ${{ steps.test-run.outputs.debug-files-output-dir }}"
        run: |
          echo "environment variable: $DEBUG_FILES_OUTPUT_DIR"
          echo "Content"
          find $DEBUG_FILES_OUTPUT_DIR
          echo "github actions context: ${{ steps.test-run.outputs.debug-files-output-dir }}"
          echo "Content"
          find ${{ steps.test-run.outputs.debug-files-output-dir }}

      - name: "Upload Logs"
        uses: actions/upload-artifact@v3
        if: ${{ failure() && steps.test-run.outputs.debug-files-output-dir }} != ''
        with:
          name: logs-e2e-${{ needs.compile.outputs.stringified-workflow-name }}-${{ github.run_number }}-${{ matrix.group }}-${{ steps.test-run.outputs.debug-files-name }}
          path: ${{ steps.test-run.outputs.debug-files-output-dir }}

      - name: "Save Docker images to Cache"
        if: ${{ !cancelled() && (failure() || !steps.docker-cache.cache.hit) }}
        run: ./tools/azure-pipelines/cache_docker_images.sh -f ${{ env.DOCKER_IMAGES_CACHE_FOLDER }} save
